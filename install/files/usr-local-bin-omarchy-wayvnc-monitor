#!/bin/bash
# wayvnc Display Attachment Monitor
# Shared system script (runs as root via systemd service)
# Continuously keeps wayvnc attached to the currently active Wayland display
# Follows user login/logout: greeter Sway on boot, user's Hyprland after login
# On VNC disconnect: automatically re-attaches to current active display

# Don't use set -e - we want the script to continue even if commands fail
# set -e

# Find and attach to currently active Wayland display
attach_to_current_display() {
  # Priority: 1) User Hyprland session (if NOT locked), 2) Greeter Sway

  # Check for active user Hyprland (any non-root user with hyprland running)
  ACTIVE_USER=$(ps aux | grep "[h]yprland" | awk '{print $1}' | grep -v root | head -1)
  echo "DEBUG: Checking for active user. Found: $ACTIVE_USER" >&2

  if [[ -n "$ACTIVE_USER" ]]; then
    # Check if this user's session is locked - if so, skip to greeter
    SESSION_ID=$(loginctl list-sessions | grep "$ACTIVE_USER" | awk '{print $1}' | head -1)
    if [[ -n "$SESSION_ID" ]]; then
      LOCK_STATE=$(loginctl show-session "$SESSION_ID" -p LockedHint | cut -d= -f2)
      echo "DEBUG: Session $SESSION_ID lock state: $LOCK_STATE" >&2

      if [[ "$LOCK_STATE" == "yes" ]]; then
        echo "DEBUG: User session is locked, skipping to greeter" >&2
        # Don't try to attach to locked session, fall through to greeter
      else
        # User is logged in and not locked - get their Wayland socket
        RUNTIME_DIR="/run/user/$(id -u "$ACTIVE_USER")"
        SOCKET="$RUNTIME_DIR/wayland-1"
        echo "DEBUG: Trying to attach to user socket: $SOCKET" >&2

        if [[ -S "$SOCKET" ]]; then
          echo "DEBUG: Socket exists, attempting attach..." >&2
          wayvncctl --socket /tmp/wayvncctl-0 attach "$SOCKET" 2>&1 && {
            echo "DEBUG: Successfully attached to $SOCKET" >&2
            return 0
          }
          echo "DEBUG: Attach failed for $SOCKET" >&2
        else
          echo "DEBUG: Socket does not exist: $SOCKET" >&2
        fi
      fi
    fi
  fi

  # Check for greeter Sway (running as root, different from user Hyprland)
  GREETER_PID=$(pgrep -u root "sway" 2>/dev/null | head -1)
  echo "DEBUG: Checking for greeter. Found PID: $GREETER_PID" >&2

  if [[ -n "$GREETER_PID" ]]; then
    # Greeter is running - get greeter's Wayland socket
    RUNTIME_DIR="/run/user/0"  # root's runtime dir
    SOCKET="$RUNTIME_DIR/wayland-1"
    echo "DEBUG: Trying to attach to greeter socket: $SOCKET" >&2

    if [[ -S "$SOCKET" ]]; then
      echo "DEBUG: Socket exists, attempting attach..." >&2
      wayvncctl --socket /tmp/wayvncctl-0 attach "$SOCKET" 2>&1 && {
        echo "DEBUG: Successfully attached to $SOCKET" >&2
        return 0
      }
      echo "DEBUG: Attach failed for $SOCKET" >&2
    else
      echo "DEBUG: Socket does not exist: $SOCKET" >&2
    fi
  fi

  echo "DEBUG: No display found to attach to" >&2
  return 1
}

# Lock screen on VNC client disconnect
handle_disconnect() {
  # Find the user with active Hyprland session
  ACTIVE_USER=$(ps aux | grep "[h]yprland" | awk '{print $1}' | grep -v root | head -1)

  if [[ -n "$ACTIVE_USER" ]]; then
    # Get the session ID for this user and lock it
    SESSION_ID=$(loginctl list-sessions | grep "$ACTIVE_USER" | awk '{print $1}' | head -1)
    if [[ -n "$SESSION_ID" ]]; then
      echo "DEBUG: Locking session $SESSION_ID for user $ACTIVE_USER" >&2
      LOCK_OUTPUT=$(loginctl lock-session "$SESSION_ID" 2>&1)
      LOCK_EXIT=$?
      echo "DEBUG: loginctl lock-session exit code: $LOCK_EXIT, output: $LOCK_OUTPUT" >&2
    fi
  fi

  # Detach wayvnc from the locked user display so reconnect can show greeter
  echo "DEBUG: Detaching wayvnc from locked display" >&2
  wayvncctl --socket /tmp/wayvncctl-0 detach 2>&1 || true
}

# Main loop: monitor wayvnc events and keep display attachment current
echo "Starting wayvnc display attachment monitor..." >&2

while true; do
  # Start event monitoring with reconnect logic
  # The --wait and --reconnect flags make wayvncctl wait and reconnect if wayvnc restarts
  # Note: --reconnect will spam errors if wayvnc is down, but that's acceptable
  wayvncctl --wait --reconnect --json event-receive 2>/dev/null | while read -r event; do
    # Only process if we got an actual event
    if [[ -z "$event" ]]; then
      continue
    fi

    # Detect client disconnect - lock screen and detach
    if echo "$event" | grep -q '"method":"client-disconnected"'; then
      echo "DEBUG: VNC client disconnected" >&2
      handle_disconnect
      sleep 1  # Wait for display state to stabilize after disconnect
      attach_to_current_display 2>/dev/null || true
    fi

    # On client connect, ensure we're attached to the right display
    if echo "$event" | grep -q '"method":"client-connected"'; then
      echo "DEBUG: VNC client connected" >&2
      attach_to_current_display 2>/dev/null || true
    fi
  done

  # If event-receive exits (wayvnc crashed or restarted), wait and retry
  sleep 2
  echo "Reconnecting to wayvnc..." >&2
done
