#!/bin/bash
# wayvnc Display Attachment Monitor
# Shared system script (runs as root via systemd service)
# Continuously keeps wayvnc attached to the currently active Wayland display
# Follows user login/logout: greeter Sway on boot, user's Hyprland after login
# On VNC disconnect: automatically re-attaches to current active display

set -e

# Find and attach to currently active Wayland display
attach_to_current_display() {
  # Priority: 1) User Hyprland session, 2) Greeter Sway

  # Check for active user Hyprland (any non-root user with hyprland running)
  ACTIVE_USER=$(ps aux | grep "[h]yprland" | awk '{print $1}' | grep -v root | head -1)
  if [[ -n "$ACTIVE_USER" ]]; then
    # User is logged in - get their Wayland socket
    RUNTIME_DIR="/run/user/$(id -u "$ACTIVE_USER")"
    SOCKET="$RUNTIME_DIR/wayland-1"
    if [[ -S "$SOCKET" ]]; then
      wayvncctl --socket /tmp/wayvncctl-0 attach "$SOCKET" 2>/dev/null && return 0
    fi
  fi

  # Check for greeter Sway (running as root, different from user Hyprland)
  GREETER_PID=$(pgrep -u root "sway" 2>/dev/null | head -1)
  if [[ -n "$GREETER_PID" ]]; then
    # Greeter is running - get greeter's Wayland socket
    RUNTIME_DIR="/run/user/0"  # root's runtime dir
    SOCKET="$RUNTIME_DIR/wayland-1"
    if [[ -S "$SOCKET" ]]; then
      wayvncctl --socket /tmp/wayvncctl-0 attach "$SOCKET" 2>/dev/null && return 0
    fi
  fi

  return 1
}

# Lock screen on VNC client disconnect (user context only)
handle_disconnect() {
  if [[ $EUID -ne 0 ]]; then
    # User service context - lock the session
    loginctl lock-session 2>/dev/null || true
  fi
}

# Main loop: monitor wayvnc events and keep display attachment current
echo "Starting wayvnc display attachment monitor..."

# Immediately attach to current active display on startup
attach_to_current_display 2>/dev/null || true

while true; do
  # Start event monitoring with reconnect logic
  # The --wait and --reconnect flags make wayvncctl wait and reconnect if wayvnc restarts
  wayvncctl --wait --reconnect --json event-receive 2>/dev/null | while read -r event; do
    # Detect client disconnect - lock screen if in user context
    if echo "$event" | grep -q '"method":"client-disconnected"'; then
      handle_disconnect
    fi

    # After a disconnect event, wait for display state to stabilize, then re-attach
    if echo "$event" | grep -q '"method":"client-disconnected"'; then
      sleep 1  # Wait for display state to stabilize after disconnect
      attach_to_current_display 2>/dev/null || true
    elif echo "$event" | grep -q '"method":"client-connected"'; then
      # On reconnect, ensure we're attached to the right display
      attach_to_current_display 2>/dev/null || true
    fi
  done

  # If event-receive exits (wayvnc crashed or restarted), wait and retry
  sleep 2
  echo "Reconnecting to wayvnc..."
done
